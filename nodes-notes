### Node.js 
is an event-based, non-blocking, asynchronous I/O runtime that uses Google’s V8 JavaScript engine 
and libuv library.
Hmmm, “event-based”, “non-blocking”, “asynchronous I/O” — that’s quite a lot to digest in one go.
So let’s approach this from a different angle and begin by focusing on the other detail that both 
descriptions mention — the V8 JavaScript engine.
Many websites will recommend that you head to the official Node download page and grab the Node
binaries for your system. While that works, I would suggest that you use a version manager instead. 
This is a program that allows you to install multiple versions of Node and switch between them at
will. There are various advantages to using a version manager. For example, it negates potential
permission issues when using Node with npm and lets you set a Node version on a per-project basis.
nstalling a Package Globally
Open your terminal and type the following:
npm install -g jshint
This will install the jshint package globally on your system. We can use it to lint the index.js 
file from the previous example:

jshint index.js
You should now see a number of ES6-related errors. If you want to fix them up, add /* jshint
esversion: 6 */ to the top of the index.js file, re-run the command and linting should pass.

If you’d like a refresher on linting, see A Comparison of JavaScript Linting Tools.

Installing a Package Locally
We can also install packages locally to a project, as opposed to globally, on our system. Create 
a test folder and open a terminal in that directory. Next type this:

npm init -y
This will create and auto-populate a package.json file in the same folder. Next, use npm to install 
the lodash package and save it as a project dependency:

npm install lodash --save
Create a file named test.js and add the following:

const _ = require('lodash');

const arr = [0, 1, false, 2, '', 3];
console.log(_.compact(arr));
Finally, run the script using node test.js. You should see [ 1, 2, 3 ] output to the terminal.

Working with the package.json File
If you look at the contents of the test directory, you’ll notice a folder entitled node_modules. 
This is where npm has saved lodash and any libraries that lodash depends on. The node_modules
folder shouldn’t be checked in to version control, and can, in fact, be re-created at any time
by running npm install from within the project’s root.

If you open the package.json file, you’ll see lodash listed under the dependencies field. By
specifying your project’s dependencies in this way, you allow any developer anywhere to clone 
your project and use npm to install whatever packages it needs to run.

If you’d like to find out more about npm, be sure to read our article A Beginner’s Guide to
npm — the Node Package Manager.
