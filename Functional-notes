### What is functional programming?
Functional programming is a programming paradigm ‚Äî a style of building the structure and elements
of computer programs ‚Äî that treats computation as the evaluation of mathematical functions and 
avoids changing-state and mutable data ‚Äî Wikipedia
Pure functions

‚Äúwater drop‚Äù by Mohan Murugesan on Unsplash
The first fundamental concept we learn when we want to understand functional programming is
pure functions. But what does that really mean? What makes a function pure?
So how do we know if a function is pure or not? Here is a very strict definition of purity:
It returns the same result if given the same arguments (it is also referred as deterministic)
It does not cause any observable side effects
It returns the same result if given the same arguments
Imagine we want to implement a function that calculates the area of a circle. An impure function
would receive radius as the parameter, and then calculate radius * radius * PI:

Why is this an impure function? Simply because it uses a global object that was not passed as a
parameter to the function.
Now imagine some mathematicians argue that the PI value is actually 42and change the value of 
the global object.
Our impure function will now result in 10 * 10 * 42 = 4200. For the same parameter (radius = 10),
we have a different result. Let's fix it!

TA-DA üéâ! Now we‚Äôll always pass thePI value as a parameter to the function. So now we are just 
accessing parameters passed to the function. No external object.
For the parameters radius = 10 & PI = 3.14, we will always have the same the result: 314.0
For the parameters radius = 10 & PI = 42, we will always have the same the result: 4200
Reading Files
If our function reads external files, it‚Äôs not a pure function ‚Äî the file‚Äôs contents can change.

Random number generation
Any function that relies on a random number generator cannot be pure.

It does not cause any observable side effects
Examples of observable side effects include modifying a global object or a parameter passed by reference.
Now we want to implement a function to receive an integer value and return the value increased by 1.

We have the counter value. Our impure function receives that value and re-assigns the counter with
the value increased by 1.
Observation: mutability is discouraged in functional programming.
We are modifying the global object. But how would we make it pure? Just return the value 
increased by 1. Simple as that.

See that our pure function increaseCounter returns 2, but the counter value is still the same. 
The function returns the incremented value without altering the value of the variable.
If we follow these two simple rules, it gets easier to understand our programs. Now every functio
n is isolated and unable to impact other parts of our system.
Pure functions are stable, consistent, and predictable. Given the same parameters, pure functions
will always return the same result. We don‚Äôt need to think of situations when the same parameter
has different results ‚Äî because it will never happen.
Pure functions benefits
The code‚Äôs definitely easier to test. We don‚Äôt need to mock anything. So we can unit test pure
functions with different contexts:
Given a parameter A ‚Üí expect the function to return value B
Given a parameter C ‚Üí expect the function to return value D
A simple example would be a function to receive a collection of numbers and expect it to increment 
each element of this collection.

We receive the numbers array, use map incrementing each number, and return a new list of incremented numbers.

For the input [1, 2, 3, 4, 5], the expected output would be [2, 3, 4, 5, 6].
Higher-order functions
When we talk about higher-order functions, we mean a function that either:
takes one or more functions as arguments, or
returns a function as its result
The doubleOperator function we implemented above is a higher-order function because it takes an operator 
function as an argument and uses it.
You‚Äôve probably already heard about filter, map, and reduce. Let's take a look at these.
Filter
Given a collection, we want to filter by an attribute. The filter function expects a true or false 
value to determine if the element should or should not be included in the result collection.
Basically, if the callback expression is true, the filter function will include the element 
in the result collection. Otherwise, it will not.
A simple example is when we have a collection of integers and we want only the even numbers.
Imperative approach
An imperative way to do it with Javascript is to:
create an empty array evenNumbers
iterate over the numbers array
push the even numbers to the evenNumbers array

We can also use the filter higher order function to receive the even function, and return
a list of even numbers:

One interesting problem I solved on Hacker Rank FP Path was the Filter Array problem. 
The problem idea is to filter a given array of integers and output only those values 
that are less than a specified value X.
