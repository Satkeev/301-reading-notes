### Javascript Templating
Javascript templating is a fast and efficient technique to render client-side view templates with Javascript
by using a JSON data source. The template is HTML markup, with added templating tags that will either insert
variables or run programming logic.
The template engine then replaces variables and instances declared in a template file with actual values at
runtime, and convert the template into an HTML file sent to the client.

### Mustache-Express
If you intend you use mustache with Node and Express, you can use mustache-express. Mustache Express lets you 
use Mustache and Express together easily.

### Properties for the Parent
(flex container)
display
This defines a flex container; inline or block depending on the given value. It enables a flex context for all
its direct children.Properties for the Parent

## flex-basis
This defines the default size of an element before the remaining space is distributed. It can be a length
(e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was 
temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the
item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its
brethren max-content, min-content, and fit-content do.

### flex
This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters
(flex-shrink and flex-basis) are optional. The default is 0 1 auto, but if you set it with a single number
value, it’s like 1 0.flex-start (default): items are packed toward the start of the flex-direction.
flex-end: items are packed toward the end of the flex-direction.
start: items are packed toward the start of the writing-mode direction.
end: items are packed toward the end of the writing-mode direction.
left: items are packed toward left edge of the container, unless that doesn’t make sense with the 
flex-direction, then it behaves like start.
right: items are packed toward right edge of the container, unless that doesn’t make sense with the
flex-direction, then it behaves like start.
center: items are centered along the line
space-between: items are evenly distributed in the line; first item is on the start line, last 
item on the end line
space-around: items are evenly distributed in the line with equal space around them. Note that visually
the spaces aren’t equal, since all the items have equal space on both sides. The first item will have
one unit of space against the container edge, but two units of space between the next item because that
next item has its own spacing that applies.
space-evenly: items are distributed so that the spacing between any two items (and the space to the
edges) is equal.
Note that that browser support for these values is nuanced. For example, space-between never got support
from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts.
The safest values are flex-start, flex-end, and center.

There are also two additional keywords you can pair with these values: safe and unsafe. Using safe
ensures that however you do this type of positioning, you can’t push an element such that it renders
off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”).


