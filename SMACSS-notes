### RESPONSIVE WEB DESIGN

The Internet took off quicker than anyone would have predicted, growing like crazy. Now, for the past few years,
mobile growth has exploded onto the scene. The growth of mobile Internet usage is also far out pacing that of 
general Internet usage growth.

These days it is hard to find someone who doesn’t own a mobile device, or multiple, connected to the Internet.
In the UK there are more mobile phones than people, and should trends continue mobile Internet usage will 
surpass that of desktop Internet usage within the year.

## esponsive vs. Adaptive vs. Mobile
For some the term responsive may not be new, and others might be even more acquainted with the terms adaptive or
mobile. Which may leave you wondering what exactly is the difference between all of them.

Responsive and adaptive web design are closely related, and often transposed as one in the same. Responsive generally
means to react quickly and positively to any change, while adaptive means to be easily modified for a new purpose or
situation, such as change. With responsive design websites continually and fluidly change based on different factors, 
such as viewport width, while adaptive websites are built to a group of preset factors. A combination of the two is 
ideal, providing the perfect formula for functional websites. Which term is used specifically doesn’t make a huge difference.

## Flexible Layouts
Responsive web design is broken down into three main components, including flexible layouts, media queries, and flexible
media. The first part, flexible layouts, is the practice of building the layout of a website with a flexible grid, 
capable of dynamically resizing to any width. Flexible grids are built using relative length units, most commonly 
percentages or em units. These relative lengths are then used to declare common grid property values such as width, 
margin, or padding.

## Media Queries
Media queries were built as an extension to media types commonly found when targeting and including styles. 
Media queries provide the ability to specify different styles for individual browser and device circumstances,
the width of the viewport or device orientation for example. Being able to apply uniquely targeted styles opens 
up a world of opportunity and leverage to responsive web design.

## Initializing Media Queries
There are a couple different ways to use media queries, using the @media rule inside of an existing style sheet, 
importing a new style sheet using the @import rule, or by linking to a separate style sheet from within the HTML
document. Generally speaking it is recommend to use the @media rule inside of an existing style sheet to avoid 
any additional HTTP requests.

## Logical Operators in Media Queries
Logical operators in media queries help build powerful expressions. There are three different logical 
operators available for use within media queries, including and, not, and only.

Using the and logical operator within a media query allows an extra condition to be added, making sure
that a browser or devices does both a, b, c, and so forth. Multiple individual media queries can be 
comma separated, acting as an unspoken or operator. The example below selects all media types between 800 and 1024 pixels wide.

@media all and (min-width: 800px) and (max-width: 1024px) {...}
Media Queries Demo
Using media queries we will now rewrite the flexible layout we built previously. One of the current 
problems within the demo appears when the aside width becomes uselessly small within smaller viewports. 
Adding a media query for viewports under 420 pixels wide we can change the layout by turning off the
floats and changing the widths of the section and aside.

@media all and (max-width: 420px) {
  section, aside {
    float: none;
    width: auto;
  }
}
## Flexible Embedded Media
Unfortunately the max-width property doesn’t work well for all instances of media, specifically around iframes
and embedded media. When it comes to third party websites, such as YouTube, who use iframes for embedded media 
this is a huge disappointment. Fortunately, there is a work around.

To get embedded media to be fully responsive, the embedded element needs to be absolutely positioned within 
a parent element. The parent element needs to have a width of 100% so that it may scale based on the width
of the viewport. The parent element also needs to have a height of 0 to trigger the hasLayout mechanism 
within Internet Explorer.

Padding is then given to the bottom of the parent element, the value of which is set in the same aspect 
ratio of the video. This allows the height of the parent element to be proportionate to that of it’s
width. Remember the responsive design formula from before? If a video has an aspect ratio of 16:9, 9 
divided by 16 equals .5625, thus requiring a bottom padding of 56.25%. Padding on the bottom and not the
top is specifically used to prevent Internet Explorer 5.5 from breaking, and treating the parent element
as an absolutely positioned element.

HTML
<figure>
  <iframe src="https://www.youtube.com/embed/4Fqg43ozz7A"></iframe>
</figure>

              
CSS
figure {
  height: 0;
  padding-bottom: 56.25%; /* 16:9 */
  position: relative;
  width: 100%;
}
iframe {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

 ## What is float?
 
 Float is a CSS positioning property. To understand its purpose and origin, we can look to print design. 
  In a print layout, images may be set into the page such that text wraps around them as needed. This is
  commonly and appropriately called “text wrap”. Here is an example of that.            

While floats can still be used for layout, these days, we have much stronger tools for creating layout
on web pages. Namely, Flexbox and Grid. Floats are still useful to know about because they have some 
abilities entirely unique to them, which is all covered in this article.

Floats are also helpful for layout in smaller instances. Take for example this little area of a web page.
If we use float for our little avatar image, when that image changes size the text in the box will reflow to accommodate:

              
