### Call stack

A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) 
to keep track of its place in a script that calls multiple functions — what function is currently 
being run and what functions are called from within that function, etc.

When a script calls a function, the interpreter adds it to the call stack and then starts carrying 
out the function.
Any functions that are called by that function are added to the call stack further up, and run
where their calls are reached.
When the current function is finished, the interpreter takes it off the stack and resumes 
execution where it left off in the last code listing.
If the stack takes up more space than it had assigned to it, it results in a "stack overflow" error.

function greeting() {
   // [1] Some codes here
   sayHi();
   // [2] Some codes here
}
function sayHi() {
   return "Hi!";
}

// Invoke the `greeting` function
greeting();

// [3] Some codes here
The code above would be executed like this:

Ignore all functions, until it reaches the greeting() function invocation.
Add the greeting() function to the call stack list.
Call stack list:
- greeting

Execute all lines of code inside the greeting() function.
Get to the sayHi() function invocation.
Add the sayHi() function to the call stack list.
Call stack list:
- greeting
- sayHi

Execute all lines of code inside the sayHi() function, until reaches its end.
Return execution to the line that invoked sayHi() and continue executing the rest of the 
greeting() function.
Delete the sayHi() function from our call stack list.
Call stack list:
- greeting

When everything inside the greeting() function has been executed, return to its invoking
line to continue executing the rest of the JS code.
Delete the greeting() function from the call stack list.
Call stack list:
EMPTY

In summary, then, we start with an empty Call Stack. Whenever we invoke a function, it is 
automatically added to the Call Stack. Once the function has executed all of its code, it is 
automatically removed from the Call Stack. Ultimately, the Stack is empty again.

he JavaScript engine (which is found in a hosting environment like the browser), is a 
single-threaded interpreter comprising of a heap and a single call stack. The browser
provides web APIs like the DOM, AJAX, and Timers.

This article is aimed at explaining what the call stack is and why it is needed. An
understanding of the call stack will give clarity to how “function hierarchy and 
execution order” works in the JavaScript engine.

The call stack is primarily used for function invocation (call). Since the call 
stack is single, function(s) execution, is done, one at a time, from top to bottom.
It means the call stack is synchronous.

The understanding of the call stack is vital to Asynchronous programming (which
we will look at in a later article).

In Asynchronous JavaScript, we have a callback function, an event loop, and a task queue.
The callback function is acted upon by the call stack during execution after the call 
back function has been pushed to the stack by the event loop.

But before we jump the gun, let us first attempt to answer the question - What is the call stack?

At the most basic level, a call stack is a data structure that uses the Last In,
First Out (LIFO) principle to temporarily store and manage function invocation (call).

Let’s break down our definition:


LIFO: When we say that the call stack, operates by the data structure principle of
Last In, First Out, it means that the last function that gets pushed into the stack 
is the first to be pop out, when the function returns.

Let us take a look at a code sample to demonstrate LIFO by printing a stack trace error to the console.

function firstFunction(){
  throw new Error('Stack Trace Error');
}

function secondFunction(){
  firstFunction();
}

function thirdFunction(){
  secondFunction();
}

thirdFunction();
When the code is run, we get an error. A stack is printed showing how the functions are stack 
on top each other. Take a look at the diagram.
