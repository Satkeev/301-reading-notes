### SQL
To retrieve data from a SQL database, we need to write SELECT statements, which are 
often colloquially refered to as queries. A query in itself is just a statement which
declares what data we are looking for, where to find it in the database, and optionally,
how to transform it before it is returned. It has a specific syntax though, which is 
what we are going to learn in the following exercises.

As we mentioned in the introduction, you can think of a table in SQL as a type of an 
entity (ie. Dogs), and each row in that table as a specific instance of that type 
(ie. A pug, a beagle, a different colored pug, etc). This means that the columns 
would then represent the common properties shared by all instances of that entity 
(ie. Color of fur, length of tail, etc).

And given a table of data, the most basic query we could write would be one that selects 
for a couple columns (properties) of the table with all the rows (instances).

Select query for a specific columns
SELECT column, another_column, …
FROM mytable;

Now we know how to select for specific columns of data from a table, but if you had
a table with a hundred million rows of data, reading through all the rows would be
inefficient and perhaps even impossible.

In order to filter certain results from being returned, we need to use a WHERE clause in
the query. The clause is applied to each row of data by checking specific column values 
to determine whether it should be included in the results or not.

Select query with constraints
SELECT column, another_column, …
FROM mytable
WHERE condition
    AND/OR another_condition
    AND/OR …;
When writing WHERE clauses with columns containing text data, SQL supports a number 
of useful operators to do things like case-insensitive string comparison and wildcard 
pattern matching. We show a few common text-data specific operators below:

Operator	Condition	Example
=	Case sensitive exact string comparison (notice the single equals)	col_name = "abc"
!= or <>	Case sensitive exact string inequality comparison	col_name != "abcd"
LIKE	Case insensitive exact string comparison	col_name LIKE "ABC"
NOT LIKE	Case insensitive exact string inequality comparison	col_name NOT LIKE "ABCD"
%	Used anywhere in a string to match a sequence of zero or more characters (only with LIKE
or NOT LIKE)	col_name LIKE "%AT%"
(matches "AT", "ATTIC", "CAT" or even "BATS")
_	Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	col_name LIKE "AN_"
(matches "AND", but not "AN")
IN (…)	String exists in a list	col_name IN ("A", "B", "C")
NOT IN (…)	String does not exist in a list	col_name NOT IN ("D", "E", "F")
Even though the data in a database may be unique, the results of any particular query may 
not be – take our Movies table for example, many different movies can be released the 
same year. In such cases, SQL provides a convenient way to discard rows that have a 
duplicate column value by using the DISTINCT keyword.

Select query with unique results
SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s);
Since the DISTINCT keyword will blindly remove duplicate rows, we will learn in a future lesson
how to discard duplicates based on specific columns using grouping and the GROUP BY clause.

Ordering results
Unlike our neatly ordered table in the last few lessons, most data in real databases are added 
in no particular column order. As a result, it can be difficult to read through and understand 
the results of a query as the size of a table increases to thousands or even millions rows.

To help with this, SQL provides a way to sort your results by a given column in ascending or
descending order using the ORDER BY clause.

Select query with ordered results
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC;
When an ORDER BY clause is specified, each row is sorted alpha-numerically based on the specified 
column's value. In some databases, you can also specify a collation to better sort data
containing international text.

Limiting results to a subset
Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses,
which are a useful optimization to indicate to the database the subset of the results you care about.
The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify where 
to begin counting the number rows from.

Select query with limited rows
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;
